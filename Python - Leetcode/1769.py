from typing import List # List 사용 시 import 필요

'''
o(n^2)으로 timeout나기 딱 좋은 코드
o(n)으로 어떻게 구할 수 있을까?
'''

'''
class Solution:
    def minOperations(self, boxes: str) -> List[int]:
        n = len(boxes) 
        
        # result[i] = boxes[0] * abs(0-i) + boxes[1] * abs(1-i) + ... + boxes[i] * abs(i-i) + ... + boxes[n-1] * abs(n-1-i)

        result = []
        for i in range(n):
            for j in range(n):
                if boxes[j] == "1":
                    result[i] =  result[i] + int(boxes[j]) * abs(j - i) 
        return result

'''

'''
o(n)으로 구할 수 있는 코드
left, right List를 각각 두어 각 칸에 모으기 위한 움직임 체크
'''

class Solution:
    def minOperations(self, boxes: str) -> List[int]:
        n = len(boxes)

        left = [0 for _ in range(n)]
        right = [0 for _ in range(n)]
        result = [0 for _ in range(n)]

        ballCnt = int(boxes[0]) #left 구하기 위해, 첫 칸의 공 개수 체크

        for i in range(n - 1):
            left[i + 1] = left[i] + ballCnt # i칸에 있던 볼이 i+1칸으로 오려면 left[i]만큼 필요, 그리고 그 앞까지 있던 공들을 한 번씩 다 옮겨야 함(그래서 left[i+1] = left[i] + ballCnt인거)
            if boxes[i + 1] == '1':
                ballCnt += 1 # i+2칸 전까지 공이 하나 더 늘어났으므로 + 1

        ballCnt = int(boxes[n-1]) #right 구하기 위해, 마지막 칸의 공 개수 체크

        for i in range(n - 1):
            right[n - i - 2] = right[n - i - 1] + ballCnt #left와 반대로 n-i-1칸에 있던 볼이 n-i-2칸으로 오려면 right[n-i-1]값에 n-1칸부터 n-i-1칸까지의 공 개수 한 번씩 다 옮겨야 함
            if boxes[n - i - 2] == '1':
                ballCnt += 1

        for i in range(n):
            result[i] = left[i] + right[i]

        return result


solution = Solution()
print(solution.minOperations